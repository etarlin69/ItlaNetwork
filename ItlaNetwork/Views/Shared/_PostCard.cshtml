@using ItlaNetwork.Core.Application.ViewModels.Post
@using ItlaNetwork.Core.Domain.Enums
@model PostViewModel

<div class="post-card-header">
    <div class="profile-pic-container">
        @if (!string.IsNullOrEmpty(Model.AuthorProfilePictureUrl))
        {
            <img src="@Model.AuthorProfilePictureUrl" alt="Profile picture of @Model.AuthorFullName" class="profile-pic" />
        }
        else
        {
            <i class="fa-solid fa-user-astronaut profile-pic-default"></i>
        }
    </div>
    <div class="author-info">
        <div class="author-name">@Model.AuthorFullName</div>
        <div class="post-date">@Model.CreatedAtFormatted</div>
    </div>
</div>

<div class="post-card-body">
    <p class="post-content">@Model.Content</p>

    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <img src="@Model.ImageUrl" class="img-fluid rounded post-card-image" alt="Post image" />
    }

    @if (!string.IsNullOrWhiteSpace(Model.VideoUrl))
    {
        <div class="post-video-container mt-3">
            <iframe src="@TransformVideoUrl(Model.VideoUrl)"
                    frameborder="0"
                    allowfullscreen
                    loading="lazy">
            </iframe>
        </div>
    }
</div>

@* --- SECCIÓN DE REACCIONES SIMPLIFICADA Y CORREGIDA --- *@
<div class="card-footer bg-transparent border-top-0 pt-3 d-flex align-items-center gap-4">
    @{
        // Se determina si el botón de like o dislike debe tener la clase 'active'
        var likeBtnClass = Model.CurrentUserReaction == ReactionType.Like ? "like active" : "like";
        var dislikeBtnClass = Model.CurrentUserReaction == ReactionType.Dislike ? "dislike active" : "dislike";
    }

    <a href="#" class="reaction-btn @likeBtnClass" data-post-id="@Model.Id" data-reaction-type="Like">
        <span class="reaction-icon-container">
            <i class="fa-solid fa-heart"></i>      @* Icono sólido (para estado activo) *@
            <i class="fa-regular fa-heart"></i>    @* Icono de contorno (para estado inactivo) *@
        </span>
        <span class="like-count">@Model.LikeCount</span>
    </a>

    <a href="#" class="reaction-btn @dislikeBtnClass" data-post-id="@Model.Id" data-reaction-type="Dislike">
        <span class="reaction-icon-container">
            <i class="fa-solid fa-thumbs-down"></i>   @* Icono sólido *@
            <i class="fa-regular fa-thumbs-down"></i> @* Icono de contorno *@
        </span>
        <span class="dislike-count">@Model.DislikeCount</span>
    </a>

    <a href="#" class="text-white-50 text-decoration-none toggle-comment-form ms-auto"><i class="fa-regular fa-comment"></i> Comentar</a>
</div>

<div class="comments-section">
    <div class="comment-list" id="comment-list-@Model.Id">
        @if (Model.Comments != null && Model.Comments.Any())
        {
            @foreach (var comment in Model.Comments)
            {
                <partial name="_CommentCard" model="comment" />
            }
        }
        else
        {
            <div class="no-comments-message" id="no-comments-message-@Model.Id">
                No hay comentarios todavía. ¡Sé el primero en comentar!
            </div>
        }
    </div>

    <div class="comment-form-container">
        <form asp-controller="Comment" asp-action="Create" method="post" class="comment-form new-comment-form">
            @Html.AntiForgeryToken()

            <input type="hidden" name="PostId" value="@Model.Id" />
            <textarea name="Content" class="form-control" rows="1" placeholder="Escribe un comentario..."></textarea>
            <button type="submit" class="btn btn-gradient btn-sm">Enviar</button>
        </form>
    </div>
</div>

@functions {
    public string TransformVideoUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url)) return "";
        if (url.Contains("youtube.com/watch?v="))
            return url.Replace("watch?v=", "embed/");
        if (url.Contains("youtu.be/"))
            return url.Replace("youtu.be/", "www.youtube.com/embed/");
        if (url.Contains("vimeo.com/"))
            return $"https://player.vimeo.com/video/{url.Split('/').Last()}";
        return url;
    }
}
